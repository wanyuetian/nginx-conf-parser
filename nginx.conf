user nginx;
worker_processes 48;
worker_rlimit_nofile 15360;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections  20480;
}

http {
#    log_format  main  "$time_local\t"
#		      "$host\t"
#		      "$status\t"
#		      "$hostname-$pid\t"
#		      "$request_time\t"
#                      "$remote_addr\t"
#                      "$remote_user\t"
#                      "$content_length\t"
#                      "$gzip_ratio\t"
#                      "$request\t"
#                      "$body_bytes_sent\t"
#                      "$http_referer\t"
#                      "$http_user_agent\t"
#                      "xff:$http_x_forwarded_for\t"
#                      "ua:$upstream_addr\t"
#                      "hri:$http_x_real_ip\t"
#                      "$http_accept_language\t"
#                      "local\t"
#                      "$upstream_response_time\t"
#                      "0\t";

log_format main escape=json  '{"real_ip":"$http_x_real_ip","proxy_add_x_forwarded_for":"$proxy_add_x_forwarded_for","forward_ip":"$http_x_forwarded_for","hostname":"$hostname","server_addr":"$server_addr","authorization":"$http_authorization","@timestamp":"$time_iso8601","@version":"1","clientip":"$remote_addr","tag":"ingress","remote_user":"$remote_user","bytes":$bytes_sent,"request_length":$request_length,"duration":$request_time,"status":$status,"request":"$request_uri","urlpath":"$uri","urlquery":"$args","method":"$request_method","referer":"$http_referer","useragent":"$http_user_agent","software":"nginx","version":"$nginx_version","host":"$host","upstream":"$upstream_addr","upstream-status":"$upstream_status","connection":$connection,"connection_requests":$connection_requests,"msec":$msec,"pipe":"$pipe","time_local":"$time_local","upstream_connect_time":"$upstream_connect_time","upstream_header_time":"$upstream_header_time","upstream_response_time":"$upstream_response_time","request_filename":"$request_filename","scheme":"$scheme","deviceinfo":"$http_deviceinfo","uid":"$http_uid"}';
log_format payroll escape=json  '{"real_ip":"$http_x_real_ip","forward_ip":"$http_x_forwarded_for","hostname":"$hostname","server_addr":"$server_addr","authorization":"$http_authorization","@timestamp":"$time_iso8601","@version":"1","clientip":"$remote_addr","tag":"ingress","remote_user":"$remote_user","bytes":$bytes_sent,"duration":$request_time,"status":$status,"urlpath":"$uri","method":"$request_method","referer":"$http_referer","useragent":"$http_user_agent","software":"nginx","version":"$nginx_version","host":"$host","upstream":"$upstream_addr","upstream-status":"$upstream_status","connection":$connection,"connection_requests":$connection_requests,"msec":$msec,"pipe":"$pipe","time_local":"$time_local","upstream_connect_time":$upstream_connect_time,"upstream_header_time":$upstream_header_time,"upstream_response_time":$upstream_response_time,"request_filename":"$request_filename","scheme":"$scheme"}';
log_format recruit escape=json  '{"real_ip":"$http_x_real_ip","forward_ip":"$http_x_forwarded_for","hostname":"$hostname","server_addr":"$server_addr","authorization":"$http_authorization","@timestamp":"$time_iso8601","@version":"1","clientip":"$remote_addr","tag":"ingress","remote_user":"$remote_user","bytes":$bytes_sent,"duration":$request_time,"status":$status,"request":"$request_uri","urlpath":"$uri","urlquery":"$args","method":"$request_method","referer":"$http_referer","useragent":"$http_user_agent","software":"nginx","version":"$nginx_version","host":"$host","upstream":"$upstream_addr","upstream-status":"$upstream_status","connection":$connection,"connection_requests":$connection_requests,"msec":$msec,"pipe":"$pipe","time_local":"$time_local","upstream_connect_time":"$upstream_connect_time","upstream_header_time":"$upstream_header_time","upstream_response_time":"$upstream_response_time","request_filename":"$request_filename","scheme":"$scheme"}';

    access_log  /var/log/nginx/access.log  main;


    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    server_names_hash_max_size 2048;
    server_names_hash_bucket_size 128;
    client_max_body_size 16M;
    check_shm_size 64M;


    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen 8080 default_server;
        server_name _;

        location / {
            return 200 'OK';
        }
    }

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
        listen 8888;
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
        }
        location /stub_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
        }
        location /status {
            check_status;
            access_log   off;
        }

        location /check_status {
            check_status json;
            access_log   off;
        }

        location /internal-nginx/status {
            check_status;
            access_log   off;
        }

        location /gateway-nginx/status {
            check_status;
            access_log   off;
        }
    }
}
